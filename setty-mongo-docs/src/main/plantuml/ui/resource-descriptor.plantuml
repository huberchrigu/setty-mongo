@startuml
class SchemaService<<Service>>
interface ResourceDescriptorResolver {
    getDescriptor()
    getDescriptorAndAssociations()
}
interface ResourceDescriptor {
    resolveAssociation()
}
class CombiningDescriptor {
    resolveAssociations()
}
class ResourceObject
class ResourceProperty {
    resolveDescriptor()
    getDescriptor()
}
class JsonSchemaDescriptor {
}
class AlpsResourceDescriptor {
}
interface AssociationObserver {
    notifyAssociatedResource(resourceName)
}
interface AssociationResourceProvider {
    getAssociatedResourceName()
}

SchemaService <.. ResourceDescriptorResolver
SchemaService <.. CombiningDescriptor
SchemaService <.. JsonSchemaDescriptor
SchemaService <.. AlpsResourceDescriptor

ResourceProperty <|-- ResourceObject
ResourceProperty ..> ResourceDescriptorResolver

ResourceDescriptor <.. ResourceProperty
ResourceDescriptor <|-- JsonSchemaDescriptor
ResourceDescriptor <|-- AlpsResourceDescriptor
ResourceDescriptor <|-- CombiningDescriptor
ResourceDescriptor <.. ResourceDescriptorResolver

CombiningDescriptor ..> JsonSchemaDescriptor
CombiningDescriptor ..> AlpsResourceDescriptor

AssociationObserver <|-- JsonSchemaObserver
AssociationObserver <|-- AlpsResourceDescriptor
AssociationResourceProvider <|-- AlpsResourceDescriptor

note right of ResourceDescriptor
    Static description of a resource/property.
end note

note bottom of CombiningDescriptor
    Resolving associations:
    1. Find a descriptor with the ability to get the associated resource name
    2. Notify all descriptors that need to know the resource name.
    3. Resolve all descriptors' association.
    4. Get all children and then do the same.
end note

note bottom of AlpsResourceDescriptor
    Knows which resource belongs to an association/uri property.
end note

note bottom of JsonSchemaDescriptor
    Does not know the associated resource, but needs to load its JSON schema.
end note

@enduml